diff --git a/include/FreeRTOS.h b/include/FreeRTOS.h
index 96cf880a4..61dd00b43 100644
--- a/include/FreeRTOS.h
+++ b/include/FreeRTOS.h
@@ -1151,6 +1151,11 @@ typedef struct xSTATIC_TCB
     UBaseType_t uxDummy5;
     void * pxDummy6;
     uint8_t ucDummy7[ configMAX_TASK_NAME_LEN ];
+
+    #if ( configUSE_HP_FRAMEWORK == 1 )
+        BaseType_t uxHPManager;
+    #endif
+
     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
         void * pxDummy8;
     #endif
diff --git a/include/task.h b/include/task.h
index 730deec5a..3a2279031 100644
--- a/include/task.h
+++ b/include/task.h
@@ -2932,6 +2932,10 @@ void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
  */
 portDONT_DISCARD void vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;
 
+extern volatile uint32_t hp_measure_prev_manager;
+extern volatile uint32_t hp_measure_next_manager;
+extern volatile uint32_t hp_measure_time;
+extern volatile uint32_t hp_measure_context_switches;
 /*
  * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY
  * THE EVENT BITS MODULE.
diff --git a/tasks.c b/tasks.c
index 90811f6be..1aa2d8c66 100644
--- a/tasks.c
+++ b/tasks.c
@@ -39,6 +39,12 @@
 #include "timers.h"
 #include "stack_macros.h"
 
+#if ( configUSE_HP_FRAMEWORK == 1 ) 
+#include "hp_config.h"
+#include "hp_guard.h"
+#include "hp_measure.h"
+#endif
+
 /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  * for the header files above, but not in this file, in order to generate the
@@ -264,6 +270,11 @@ typedef struct tskTaskControlBlock       /* The old naming convention is used to
     StackType_t * pxStack;                      /*< Points to the start of the stack. */
     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created.  Facilitates debugging only. */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 
+
+    #if ( configUSE_HP_FRAMEWORK == 1 )
+        BaseType_t uxHPManager;
+    #endif
+
     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
     #endif
@@ -908,6 +919,18 @@ static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
         pxNewTCB->pcTaskName[ 0 ] = 0x00;
     }
 
+        // add a simple identifier to check if it's the HP task
+    #if ( configUSE_HP_FRAMEWORK == 1 ) 
+        {
+            if (strcmp(pcName, HP_MANAGER_TASK_NAME) == 0) {
+                pxNewTCB->uxHPManager = 1;
+            } else {
+                pxNewTCB->uxHPManager = 0;
+            }
+        
+        }
+    #endif
+
     /* This is used as an array index so must ensure it's not too large.  First
      * remove the privilege bit if one is present. */
     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
@@ -1319,6 +1342,7 @@ static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
         {
             mtCOVERAGE_TEST_MARKER();
         }
+
     }
 
 #endif /* INCLUDE_vTaskDelayUntil */
@@ -2993,6 +3017,23 @@ BaseType_t xTaskIncrementTick( void )
 
 void vTaskSwitchContext( void )
 {
+
+    /* Measurement */
+    uint32_t time_start, time_end;
+    
+    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
+    DWT->CYCCNT = 0; 
+    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
+
+
+    time_start = DWT->CYCCNT;
+    /* */
+
+    #if (configUSE_HP_FRAMEWORK == 1)
+    uint32_t prev_task_hp = 0;
+    #endif
+
+
     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     {
         /* The scheduler is currently suspended - do not allow a context
@@ -3042,11 +3083,30 @@ void vTaskSwitchContext( void )
             }
         #endif
 
+        
+        #if ( configUSE_HP_FRAMEWORK == 1 )
+            {
+                prev_task_hp = pxCurrentTCB->uxHPManager;
+            }
+        #endif
+
         /* Select a new task to run using either the generic C or port
          * optimised asm code. */
         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
         traceTASK_SWITCHED_IN();
 
+        
+        /* If the next task is a low-priority task, call the hotpatch applicator */
+        #if ( configUSE_HP_FRAMEWORK == 1 )
+            {
+                //hp_measure_context_switches++;
+
+                hp_guard_applicator(pxCurrentTCB->uxHPManager, prev_task_hp);
+                //prev_task_hp += 1;
+            }   
+        #endif     
+        
+
         /* After the new task is switched in, update the global errno. */
         #if ( configUSE_POSIX_ERRNO == 1 )
             {
@@ -3064,6 +3124,17 @@ void vTaskSwitchContext( void )
             }
         #endif /* configUSE_NEWLIB_REENTRANT */
     }
+    
+    time_end = DWT->CYCCNT;
+    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
+    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
+    hp_measure_time += time_end - time_start;
+    hp_measure_context_switches++;
+    
+    #if ( configUSE_HP_FRAMEWORK == 1 )
+    hp_measure_prev_manager += prev_task_hp;
+    hp_measure_next_manager += pxCurrentTCB->uxHPManager;
+    #endif
 }
 /*-----------------------------------------------------------*/
